
#include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}

Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.
Line 2: using namespace std means that we can use names for objects and variables from the standard library.
#include <iostream>
int main() {
  std::cout << "Hello World!";
  return 0;
}
Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable.
Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} will be executed.
Line 5: cout (pronounced "see-out") is an object used together with the insertion operator (<<) to output/print text. In our example it will output "Hello World".
Note: Every C++ statement ends with a semicolon ;.
Note: The body of int main() could also been written as:
int main () { cout << "Hello World! "; return 0; }
Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.
Line 6: return 0 ends the main function.
Line 7: Do not forget to add the closing curly bracket } to actually end the main function.

@ Escape Sequence
New Line: << end1 OR /n 
\t	Creates a horizontal tab	
\\	Inserts a backslash character (\)	
\"	Inserts a double quote character	

@ Comments
// Single line
/*Multi
line*/

@ Variable Types
int - stores integers (whole numbers), without decimals, such as 123 or -123
double - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string - stores text, such as "Hello World". String values are surrounded by double quotes
bool - stores values with two states: true or false

type variableName = value;

int myAge = 35;
cout << "I am " << myAge << " years old.";

add +

- Declare Many Variables
int x = 5, y = 6, z = 50;

- Same value to multiple variables
int x, y, z;
x = y = z = 50;

- Identifiers, Variable Name
Names can contain letters, digits and underscores
Names must begin with a letter or an underscore (_)
Names are case sensitive (myVar and myvar are different variables)
Names cannot contain whitespaces or special characters like !, #, %, etc.
Reserved words (like C++ keywords, such as int) cannot be used as names

- Constant: unchangeable & read only
const varType varName = varValue;

@ User Input
cin >> x;

@ Data Types
Data Type	  Size	          Description
boolean	    1 byte	        Stores true or false values [true = 1 and false = 0]
char	      1 byte	        Stores a single character/letter/number, or ASCII values
int	        2 or 4 bytes	  Stores whole numbers, without decimals
float	      4 bytes	        Stores fractional numbers, containing one or more decimals. Sufficient for storing 6-7 decimal digits
double	    8 bytes	        Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits

- power of 10
float: 1e6
double : 2E8
// double for calculations (precision: digits after decimal point)

- <string> library
// Include the string library
#include <string>

// Create a string variable
string greeting = "Hello";

// Output string value
cout << greeting;

@ Operators
Operator	Name	            Description	Example	Try it
+	        Addition	        Adds together two values	x + y	
-	        Subtraction	      Subtracts one value from another	x - y	
*	        Multiplication	  Multiplies two values	x * y	
/	        Division	        Divides one value by another	x / y	
%	        Modulus	          Returns the division remainder	x % y	
++	      Increment	        Increases the value of a variable by 1	++x	
--	      Decrement	        Decreases the value of a variable by 1	--x
