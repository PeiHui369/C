
#include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}

Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.
Line 2: using namespace std means that we can use names for objects and variables from the standard library.
#include <iostream>
int main() {
  std::cout << "Hello World!";
  return 0;
}
Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable.
Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} will be executed.
Line 5: cout (pronounced "see-out") is an object used together with the insertion operator (<<) to output/print text. In our example it will output "Hello World".
Note: Every C++ statement ends with a semicolon ;.
Note: The body of int main() could also been written as:
int main () { cout << "Hello World! "; return 0; }
Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.
Line 6: return 0 ends the main function.
Line 7: Do not forget to add the closing curly bracket } to actually end the main function.

@ Escape Sequence
New Line: << end1 OR /n 
\t	Creates a horizontal tab	
\\	Inserts a backslash character (\)	
\"	Inserts a double quote character	

@ Comments
// Single line
/*Multi
line*/

@ Variable Types
int - stores integers (whole numbers), without decimals, such as 123 or -123
double - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string - stores text, such as "Hello World". String values are surrounded by double quotes
bool - stores values with two states: true or false

type variableName = value;

int myAge = 35;
cout << "I am " << myAge << " years old.";

add +

- Declare Many Variables
int x = 5, y = 6, z = 50;

- Same value to multiple variables
int x, y, z;
x = y = z = 50;

- Identifiers, Variable Name
Names can contain letters, digits and underscores
Names must begin with a letter or an underscore (_)
Names are case sensitive (myVar and myvar are different variables)
Names cannot contain whitespaces or special characters like !, #, %, etc.
Reserved words (like C++ keywords, such as int) cannot be used as names

- Constant: unchangeable & read only
const varType varName = varValue;

@ User Input
cin >> x;

@ Data Types
Data Type	  Size	          Description
boolean	    1 byte	        Stores true or false values [true = 1 and false = 0]
char	      1 byte	        Stores a single character/letter/number, or ASCII values
int	        2 or 4 bytes	  Stores whole numbers, without decimals
float	      4 bytes	        Stores fractional numbers, containing one or more decimals. Sufficient for storing 6-7 decimal digits
double	    8 bytes	        Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits

- power of 10
float: 1e6
double : 2E8
// double for calculations (precision: digits after decimal point)

- <string> library
// Include the string library
#include <string>

// Create a string variable
string greeting = "Hello";

// Output string value
cout << greeting;

@ Operators
- Arithmetic
Operator	Name	            Description	Example	Try it
+	        Addition	        Adds together two values	x + y	
-	        Subtraction	      Subtracts one value from another	x - y	
*	        Multiplication	  Multiplies two values	x * y	
/	        Division	        Divides one value by another	x / y	
%	        Modulus	          Returns the division remainder	x % y	
++	      Increment	        Increases the value of a variable by 1	++x	
--	      Decrement	        Decreases the value of a variable by 1	--x

- Assignment
Operator	Example	Same As	Try it
=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3

- Comparison
Operator	Name	Example	Try it
==	Equal to	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to	x <= y

- Logical
Operator	Name	Description	Example	Try it
&& 	Logical and	Returns true if both statements are true	x < 5 &&  x < 10	
|| 	Logical or	Returns true if one of the statements is true	x < 5 || x < 4	
!	Logical not	Reverse the result, returns false if the result is true	!(x < 5 && x < 10)

@ Strings
- to use
// Include the string library
#include <string>

- Concatenation
string fullName = firstName + " " + lastName;

- Length
cout << "The length of the txt string is: " <<  txt.length(); //txt.size();

- Access specific char
cout << myString[0];

- Change specific char
myString[0] = 'J';

-
The backslash (\) escape character turns special characters into string characters:
Escape character	Result	Description
\'	'	Single quote
\"	"	Double quote
\\	\	Backslash

Escape Character	Result	
\n	              New Line	
\t	              Tab

- User Input
cin considers a space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word (even if you type many words)
string fullName;
cout << "Type your full name: ";
getline (cin, fullName);

@ Math
// Include the cmath library
#include <cmath>

max(a,b)
min(a,b)
sqrt(a)
round(a)
log(a)

Function	        Description
abs(x)	          Returns the absolute value of x
acos(x)	          Returns the arccosine of x
asin(x)	          Returns the arcsine of x
atan(x)	          Returns the arctangent of x
cbrt(x)	          Returns the cube root of x
ceil(x)	          Returns the value of x rounded up to its nearest integer
cos(x)	          Returns the cosine of x
cosh(x)         	Returns the hyperbolic cosine of x
exp(x)	          Returns the value of Ex
expm1(x)	        Returns ex -1
fabs(x)	Returns the absolute value of a floating x
fdim(x, y)	Returns the positive difference between x and y
floor(x)	Returns the value of x rounded down to its nearest integer
hypot(x, y)	Returns sqrt(x2 +y2) without intermediate overflow or underflow
fma(x, y, z)  	Returns x*y+z without losing precision
fmax(x, y)	Returns the highest value of a floating x and y
fmin(x, y)	Returns the lowest value of a floating x and y
fmod(x, y)	Returns the floating point remainder of x/y
pow(x, y)	Returns the value of x to the power of y
sin(x)	Returns the sine of x (x is in radians)
sinh(x)	Returns the hyperbolic sine of a double value
tan(x)	Returns the tangent of an angle
tanh(x)	Returns the hyperbolic tangent of a double value



- Append
string fullName = firstName.append(lastName);

@ Condition
if (condition1) {
  // block of code to be executed if condition1 is true
} else if (condition2) {
  // block of code to be executed if the condition1 is false and condition2 is true
} else {
  // block of code to be executed if the condition1 is false and condition2 is false
}

variable = (condition) ? expressionTrue : expressionFalse;

@ Switch
switch(expression) {
  case x:
    // code block
    break;         // save a lot of execution time because it "ignores" the execution of all the rest of the code in the switch block when a match is found
  case y:
    // code block
    break;
  default:        //specifies some code to run if there is no case match
    // code block
}

@ Loop
- while
while (condition) {
  // code block to be executed
}

- do while
The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
do {
  // code block to be executed
}
while (condition);

- for 
When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:
for (statement 1; statement 2; statement 3) {
  // code block to be executed
}
Statement 1 is executed (one time) before the execution of the code block.
Statement 2 defines the condition for executing the code block.
Statement 3 is executed (every time) after the code block has been executed.

- for each
for (type variableName : arrayName) {
  // code block to be executed
}

break statement can also be used to jump out of a loop
continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

@ Arrays
string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};
cars[0]; //ACCESS first ele
cars[0] = "Opel"; //Change

- to loop through
for (int i = 0; i < 5; i++) {
  cout << myNumbers[i] << "\n";
}
for (int i : myNumbers) {
  cout << i << "\n";
}

- omit elements on declaration
string cars[5];
cars[0] = "Volvo";
cars[1] = "BMW";
...

- get SIZE   
cout << sizeof(myNumbers);
// int type is usually 4 bytes, so if 5 ele will get result = 20, therefore: 
int getArrayLength = sizeof(myNumbers) / sizeof(int);
//loop through array size
for (int i = 0; i < sizeof(myNumbers) / sizeof(int); i++) {
  cout << myNumbers[i] << "\n";
}

- Multidimensional
string letters[2][4]; //2d
// 3d
string letters[2][2][2] = {
  {
    { "A", "B" },
    { "C", "D" }
  },
  {
    { "E", "F" },
    { "G", "H" }
  }
};
letters[0][2];  //first row third column
// loop through
for (int i = 0; i < 2; i++) {
  for (int j = 0; j < 4; j++) {
    cout << letters[i][j] << "\n";
  }
}

@ Structures
// Create a structure variable called myStructure
struct {
  int myNum;
  string myString;
} myStructure;

// Assign values to members of myStructure
myStructure.myNum = 1;
myStructure.myString = "Hello World!";

// Print members of myStructure
cout << myStructure.myNum << "\n";
cout << myStructure.myString << "\n";

- 1 Structure in Multiple Variables
struct {
  string brand;
  string model;
  int year;
} myCar1, myCar2; // We can add variables by separating them with a comma here

// Put data into the first structure
myCar1.brand = "BMW";
myCar1.model = "X5";
myCar1.year = 1999;

// Put data into the second structure
myCar2.brand = "Ford";
myCar2.model = "Mustang";
myCar2.year = 1969;

- Named Structure
// Declare a structure named "car"
struct car {
  string brand;
  string model;
  int year;
};

int main() {
  // Create a car structure and store it in myCar1;
  car myCar1;
  myCar1.brand = "BMW";
  myCar1.model = "X5";
  myCar1.year = 1999;

  // Create another car structure and store it in myCar2;
  car myCar2;
  

@ Reference
string food = "Pizza";
string &meal = food;
cout << food << "\n";  // Outputs Pizza
cout << meal << "\n";  // Outputs Pizza

- Memory Address
string food = "Pizza";
cout << &food; // Outputs 0x6dfed4

References and Pointers (which you will learn about in the next chapter) are important in C++, because they give you the ability to manipulate the data in the computer's memory - which can reduce the code and improve the performance.

@ Pointers
- Create
string* mystring; // Preferred
string *mystring;
string * mystring;

- Dereference (print out the value)
cout << ptr << "\n"; //(0x6dfed4)
cout << *ptr << "\n"; //(Pizza)

Note that the * sign can be confusing here, as it does two different things in our code:
When used in declaration (string* ptr), it creates a pointer variable.
When not used in declaration, it act as a dereference operator.

- Modify Pointer Value
string food = "Pizza";
string* ptr = &food;

// Output the value of food (Pizza)
cout << food << "\n";

// Output the memory address of food (0x6dfed4)
cout << &food << "\n";

// Access the memory address of food and output its value (Pizza)
cout << *ptr << "\n";

// Change the value of the pointer
*ptr = "Hamburger";

// Output the new value of the pointer (Hamburger)
cout << *ptr << "\n";

// Output the new value of the food variable (Hamburger)
cout << food << "\n";


